Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroups:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: List<AWS::EC2::SecurityGroup::Id>

    KeyPair:
        Description: Amazon EC2 Key Pair
        Type: "AWS::EC2::KeyPair::KeyName"

    MinSize:
        Type: Number
        Description: Minimum number of ECS Instances in the ASG

    MaxSize:
        Type: Number
        Description: Maximum number of EC2 Instances in the ASG

    Desired:
        Type: Number
        Description: Desired dumber of EC2 Instances in the ASG cannot be less than MinSize

    ECSAMI:
        Description: AMI ID
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref MinSize
            MaxSize: !Ref MaxSize
            DesiredCapacity: !Ref Desired
            TerminationPolicies:
                - Default
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref ECSAMI
            InstanceType: !Ref InstanceType
            KeyName: !Ref KeyPair
            SecurityGroups: !Ref SecurityGroups
            IamInstanceProfile: !Ref ECSInstanceProfile
            BlockDeviceMappings:
              - DeviceName: "/dev/xvda"
                Ebs:
                  VolumeSize: "35"
                  VolumeType: "gp2"
            UserData:
                "Fn::Base64": !Sub |
                    Content-Type: multipart/mixed; boundary="===============BOUNDARY=="
                    MIME-Version: 1.0

                    --===============BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    Content-Transfer-Encoding: 7bit
                    Content-Disposition: attachment; filename="standard_userdata.txt"

                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap
                    # Deleting unused containers every 5 minutes default 3 hours
                    echo "ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=5m" >> /etc/ecs/ecs.config
                    # Deleting unused images every 10 minutes, that are at least 15 minutes old
                    echo "ECS_IMAGE_CLEANUP_INTERVAL=10m" >> /etc/ecs/ecs.config
                    echo "ECS_IMAGE_MINIMUM_CLEANUP_AGE=15m" >> /etc/ecs/ecs.config
                    echo "ECS_NUM_IMAGES_DELETE_PER_CYCLE=10" >> /etc/ecs/ecs.config

                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
                    --===============BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/cloud-boothook; charset="us-ascii"
                    Content-Transfer-Encoding: 7bit
                    Content-Disposition: attachment; filename="boothook.txt"

                    #cloud-boothook
                    echo 'OPTIONS="${!OPTIONS} --storage-opt dm.basesize=100G"' >> /etc/sysconfig/docker

                    --===============BOUNDARY==--

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.
    #
    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "ecs:CreateCluster",
                                  "ecs:DeregisterContainerInstance",
                                  "ecs:DiscoverPollEndpoint",
                                  "ecs:Poll",
                                  "ecs:RegisterContainerInstance",
                                  "ecs:StartTelemetrySession",
                                  "ecs:Submit*",
                                  "ecr:*",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents",
                                  "ecr:BatchCheckLayerAvailability",
                                  "ecr:BatchGetImage",
                                  "ecr:GetDownloadUrlForLayer",
                                  "ecr:GetAuthorizationToken"
                              ],
                              "Resource": "*"
                          }
                        ]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster
